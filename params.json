{"name":"Gif-animation","tagline":"GifAnimation is a Processing library to play and export GIF animations","body":"# gifAnimation processing library\r\n\r\nGifAnimation is a [Processing][1] library to play and export GIF animations. The GIFEncoder &amp; GIFDecoder classes were written by [Kevin Weiner][2]. Please see the separate copyright notice in the headers of the GifDecoder &amp; GifEncoder classes.\r\n\r\n\r\n## DOWNLOAD\r\n\r\n[gifAnimation.zip][3] (compatible with Processing 1.x and 2.x)\r\n\r\n##  INSTALLATION:\r\n### Processing 1.x\r\nDownload and unzip the gifAnimation.zip and copy the gifAnimation-folder into your processing libraries folder.\r\n### Processing 2.x\r\nSame as Processing 1.x **OR** use the built-in library-browser in the IDE\r\n\r\n## USAGE:\r\n\r\nBesides this reference, there are basic examples included in the download. There's also an [online example][4]. To use gifAnimation library, you need to import it into your sketch by using the menu or typing\r\n\r\n\r\n```java\r\nimport gifAnimation.*;\r\n```\r\n\r\n### DISPLAYING A GIF ANIMATION:\r\n\r\nThe class to access/display GIF animations is called `Gif`. It has two possibilities to access the frame pixel data:\r\n\r\nExtract all frames of an animated Gif into a PImage[] array using the static method \"getPImages()\". you need to pass a reference to the PApplet and a filename to it. The file should be in the sketch data folder. This method is useful if you just want to mess with the frames yourself and don't need the playback possibilities. The method is static, so you have no separate thread going.\r\n\r\n```java\r\nPImage[] allFrames = Gif.getPImages(this, \"lavalamp.gif\");\r\n```\r\nThe second way to acces the animation is to play it like a video. This will play the animation with the frame delays specified in the GIF file. Gif extends PImage, so any instance of Gif fits wherever PImage can be used.\r\n\r\n#### Create a new Gif object\r\n\r\n\r\n```java\r\nGif myAnimation = new Gif(PApplet parent, String filename);\r\n```\r\n\r\nIn a sketch this would look like this:\r\n\r\n```java\r\nvoid setup() {\r\nsize(400,400);\r\n    Gif myAnimation = new Gif(this, \"lavalamp.gif\");\r\nmyAnimation.play();\r\n}\r\n\r\nvoid draw() {\r\nimage(myAnimation, 10,10);\r\n}\r\n```\r\n\r\n### EXPORTING A GIF ANIMATION\r\n\r\nThe class to export GIF animations is called `GifMaker`. To start recording\r\ninto a GIF file, create a GifMaker object in one of the following ways:\r\n\r\n```java\r\nGifMaker gifExport = new GifMaker(PApplet parent, String filename);\r\n```\r\n```java\r\nGifMaker gifExport = new GifMaker(PApplet parent, String filename, int quality);\r\n```\r\n```java\r\nGifMaker gifExport = new GifMaker(PApplet parent, String filename, int quality, int transparentColor);\r\n```\r\n\r\nIn a sketch this would look like this:\r\n\r\n```java\r\nvoid setup() {\r\nsize(200,200);\r\n    frameRate(12);\r\n\r\n    gifExport = new GifMaker(this, \"export.gif\");\r\n    gifExport.setRepeat(0);\t\t\t\t// make it an \"endless\" animation\r\n    gifExport.setTransparent(0,0,0);\t// black is transparent\r\n\r\n}\r\n\r\nvoid draw() {\r\n    background(0);\r\n    fill(255);\r\n    ellipse(mouseX, mouseY, 10, 10);\r\n\r\n    gifExport.setDelay(1);\r\n    gifExport.addFrame();\r\n}\r\n\r\nvoid mousePressed() {\r\n    gifExport.finish();\t\t\t\t\t// write file\r\n}\r\n```\r\n\r\n\r\n##DOCUMENTATION\r\n###The 'Gif' Class\r\n\r\n####void play()\r\nplays the animation without loop\r\n\r\n####void pause()\r\npauses the animation\r\n\r\n####void stop()\r\nstops and rewinds the animation\r\n\r\n####void loop()\r\nstarts the animation. it will play in a loop and ignore the\r\nGIF repeat setting.\r\n\r\n####void noLoop()\r\ndisables looping\r\n\r\n####void ignoreRepeat()\r\nGIF-files can have a repeat-count setting. It states the amount of loops this animation should perform. if you call `ignoreRepeat()` on a Gif object, it will ingore this setting when playing. If you start animations using `loop()`, repeat settings will always be ignored.\r\n\r\n#### void jump(int where)\r\njumps to a specific frame in the animation if that frame exists\r\n\r\n#### boolean isPlaying()\r\nwhether the Animation is currently playing\r\n\r\n#### boolean isLooping()\r\nwhether the Animation has its loop-flag set\r\n\r\n#### boolean isIgnoringRepeat()\r\nwhether this Gif has its ignoreRepeat-flag set or not.\r\nSee also `ignoreRepeat()`\r\n\r\n#### int currentFrame()\r\nreturns the number of the frame that is currently displayed\r\n\r\n#### PImage[] getPImages()\r\nreturns an array of PImages containing the animation frames. note that this method is called in an instance of Gif, while `Gif.getPImages(PApplet, String)` is a static method\r\n\r\n#### int getRepeat()\r\nreturns the number of repeats that is specified in the GIF-file\r\n\r\n### The GifMaker Class\r\n\r\n#### void setTransparent(int color)\r\n#### void setTransparent(int red, int green, int blue)\r\n#### void setTransparent(float red, float green, float blue)\r\nSets the transparent color of the GIF file. Unlike other image formats\r\nthat support alpha (e.g. PNG), GIF does not support semi-transparent pixels.\r\nThe way to achieve transparency is to set a color that will be transparent\r\nwhen rendering the GIF. So, if you set the transparent color to black, the\r\nblack pixels in your gif file will be transparent.\r\n\r\n#### void setQuality(int qualtiy)\r\nSets the quality of the color quantization process. GIF only supports 256 indexed colors per frame. So, the colors that come in your images need to be reduced to a set of 256 colors. The quality of this process can be set using this method (or by instantiating the GifMaker object wiht the respective constructor). Default is 10 and seems to produce good results. Higher qualities will cause the qantization process to be more expensive in terms of cpu-usage.\r\n\r\n#### void setSize(int width, int height)\r\nSets the size of the new GIF file. If this method is not invoked, the image dimensions of the first added frame will be the size of the GIF.\r\n\r\n#### void setRepeat(int count)\r\nSets the repeat setting in the GIF file. GIF renderers like webbrowsers should respect this setting and loop the animation that many times before stopping. Default is 1. 0 means endless loop.\r\n\r\n#### void addFrame()\r\nAdds the current sketch window content as a new gif frame.\r\n#### void addFrame(PImage image)\r\nPass a PImage to add it as a new gif frame\r\n#### void addFrame(int[] pixelArray, int width, int height)\r\nPass a int pixel array and the width and height to add it as a new gif frame.\r\n\r\n#### void setDelay(int ms)\r\nSets the delay (the \"framerate\") for the most recently added frame. This is measured in Milliseconds. This can be different for every frame. Note, this effects the playback speed of the resulting GIF-file only. So, the speed / framerate with which you wrote the frames has no effect on play-\r\nback speed.\r\n\r\n#### void setDispose(int mode)\r\nSets the disposal mode for the current frame. Disposal modes are a special concept used in the GIF file format. It basically tetermines whether a frame will be overriden by the next frame, or if the next frame should be added, layed over the last frame.\r\nFor convenience there are constants for the different disposal modes:\r\n\r\n| Dispose mode |  |\r\n|--------|--------|\r\n| GifMaker.DISPOSE_NOTHING | Nothing special |\r\n| GifMaker.DISPOSE_KEEP | retain the current image |\r\n| GifMaker.DISPOSE\\_RESTORE\\_BACKGROUND|restore the background color|\r\n| GifMaker.DISPOSE_REMOVE |restore the background color|\r\n\r\n#### boolean finish()\r\nFinishes GIF recording and saves the GIF file to the given file name in\r\nthe sketch folder. Returns true if saving the file was successful, false if not.\r\n\r\n   [1]: http://www.processing.org\r\n   [2]: http://www.fmsware.com/stuff/gif.html\r\n   [3]: http://www.extrapixel.ch/processing/gifAnimation/gifAnimation.zip\r\n   [4]: http://extrapixel.ch/processing/gifAnimation/applet/\r\n  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}